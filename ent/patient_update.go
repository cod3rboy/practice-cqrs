// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cod3rboy/practice-cqrs/ent/patient"
	"github.com/cod3rboy/practice-cqrs/ent/predicate"
)

// PatientUpdate is the builder for updating Patient entities.
type PatientUpdate struct {
	config
	hooks    []Hook
	mutation *PatientMutation
}

// Where appends a list predicates to the PatientUpdate builder.
func (pu *PatientUpdate) Where(ps ...predicate.Patient) *PatientUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *PatientUpdate) SetName(s string) *PatientUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *PatientUpdate) SetNillableName(s *string) *PatientUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetWard sets the "ward" field.
func (pu *PatientUpdate) SetWard(i int) *PatientUpdate {
	pu.mutation.ResetWard()
	pu.mutation.SetWard(i)
	return pu
}

// SetNillableWard sets the "ward" field if the given value is not nil.
func (pu *PatientUpdate) SetNillableWard(i *int) *PatientUpdate {
	if i != nil {
		pu.SetWard(*i)
	}
	return pu
}

// AddWard adds i to the "ward" field.
func (pu *PatientUpdate) AddWard(i int) *PatientUpdate {
	pu.mutation.AddWard(i)
	return pu
}

// SetAge sets the "age" field.
func (pu *PatientUpdate) SetAge(i int) *PatientUpdate {
	pu.mutation.ResetAge()
	pu.mutation.SetAge(i)
	return pu
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (pu *PatientUpdate) SetNillableAge(i *int) *PatientUpdate {
	if i != nil {
		pu.SetAge(*i)
	}
	return pu
}

// AddAge adds i to the "age" field.
func (pu *PatientUpdate) AddAge(i int) *PatientUpdate {
	pu.mutation.AddAge(i)
	return pu
}

// Mutation returns the PatientMutation object of the builder.
func (pu *PatientUpdate) Mutation() *PatientMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PatientUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PatientUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PatientUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PatientUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PatientUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(patient.Table, patient.Columns, sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(patient.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Ward(); ok {
		_spec.SetField(patient.FieldWard, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedWard(); ok {
		_spec.AddField(patient.FieldWard, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Age(); ok {
		_spec.SetField(patient.FieldAge, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedAge(); ok {
		_spec.AddField(patient.FieldAge, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{patient.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PatientUpdateOne is the builder for updating a single Patient entity.
type PatientUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PatientMutation
}

// SetName sets the "name" field.
func (puo *PatientUpdateOne) SetName(s string) *PatientUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillableName(s *string) *PatientUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetWard sets the "ward" field.
func (puo *PatientUpdateOne) SetWard(i int) *PatientUpdateOne {
	puo.mutation.ResetWard()
	puo.mutation.SetWard(i)
	return puo
}

// SetNillableWard sets the "ward" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillableWard(i *int) *PatientUpdateOne {
	if i != nil {
		puo.SetWard(*i)
	}
	return puo
}

// AddWard adds i to the "ward" field.
func (puo *PatientUpdateOne) AddWard(i int) *PatientUpdateOne {
	puo.mutation.AddWard(i)
	return puo
}

// SetAge sets the "age" field.
func (puo *PatientUpdateOne) SetAge(i int) *PatientUpdateOne {
	puo.mutation.ResetAge()
	puo.mutation.SetAge(i)
	return puo
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillableAge(i *int) *PatientUpdateOne {
	if i != nil {
		puo.SetAge(*i)
	}
	return puo
}

// AddAge adds i to the "age" field.
func (puo *PatientUpdateOne) AddAge(i int) *PatientUpdateOne {
	puo.mutation.AddAge(i)
	return puo
}

// Mutation returns the PatientMutation object of the builder.
func (puo *PatientUpdateOne) Mutation() *PatientMutation {
	return puo.mutation
}

// Where appends a list predicates to the PatientUpdate builder.
func (puo *PatientUpdateOne) Where(ps ...predicate.Patient) *PatientUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PatientUpdateOne) Select(field string, fields ...string) *PatientUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Patient entity.
func (puo *PatientUpdateOne) Save(ctx context.Context) (*Patient, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PatientUpdateOne) SaveX(ctx context.Context) *Patient {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PatientUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PatientUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PatientUpdateOne) sqlSave(ctx context.Context) (_node *Patient, err error) {
	_spec := sqlgraph.NewUpdateSpec(patient.Table, patient.Columns, sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Patient.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, patient.FieldID)
		for _, f := range fields {
			if !patient.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != patient.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(patient.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Ward(); ok {
		_spec.SetField(patient.FieldWard, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedWard(); ok {
		_spec.AddField(patient.FieldWard, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Age(); ok {
		_spec.SetField(patient.FieldAge, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedAge(); ok {
		_spec.AddField(patient.FieldAge, field.TypeInt, value)
	}
	_node = &Patient{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{patient.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
