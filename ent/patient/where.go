// Code generated by ent, DO NOT EDIT.

package patient

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/cod3rboy/practice-cqrs/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldName, v))
}

// Ward applies equality check predicate on the "ward" field. It's identical to WardEQ.
func Ward(v int) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldWard, v))
}

// Age applies equality check predicate on the "age" field. It's identical to AgeEQ.
func Age(v int) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldAge, v))
}

// Discharged applies equality check predicate on the "discharged" field. It's identical to DischargedEQ.
func Discharged(v bool) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldDischarged, v))
}

// CurrentVersion applies equality check predicate on the "current_version" field. It's identical to CurrentVersionEQ.
func CurrentVersion(v int32) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldCurrentVersion, v))
}

// ProjectedAtDatetime applies equality check predicate on the "projected_at_datetime" field. It's identical to ProjectedAtDatetimeEQ.
func ProjectedAtDatetime(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldProjectedAtDatetime, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContainsFold(FieldName, v))
}

// WardEQ applies the EQ predicate on the "ward" field.
func WardEQ(v int) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldWard, v))
}

// WardNEQ applies the NEQ predicate on the "ward" field.
func WardNEQ(v int) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldWard, v))
}

// WardIn applies the In predicate on the "ward" field.
func WardIn(vs ...int) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldWard, vs...))
}

// WardNotIn applies the NotIn predicate on the "ward" field.
func WardNotIn(vs ...int) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldWard, vs...))
}

// WardGT applies the GT predicate on the "ward" field.
func WardGT(v int) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldWard, v))
}

// WardGTE applies the GTE predicate on the "ward" field.
func WardGTE(v int) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldWard, v))
}

// WardLT applies the LT predicate on the "ward" field.
func WardLT(v int) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldWard, v))
}

// WardLTE applies the LTE predicate on the "ward" field.
func WardLTE(v int) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldWard, v))
}

// AgeEQ applies the EQ predicate on the "age" field.
func AgeEQ(v int) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldAge, v))
}

// AgeNEQ applies the NEQ predicate on the "age" field.
func AgeNEQ(v int) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldAge, v))
}

// AgeIn applies the In predicate on the "age" field.
func AgeIn(vs ...int) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldAge, vs...))
}

// AgeNotIn applies the NotIn predicate on the "age" field.
func AgeNotIn(vs ...int) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldAge, vs...))
}

// AgeGT applies the GT predicate on the "age" field.
func AgeGT(v int) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldAge, v))
}

// AgeGTE applies the GTE predicate on the "age" field.
func AgeGTE(v int) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldAge, v))
}

// AgeLT applies the LT predicate on the "age" field.
func AgeLT(v int) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldAge, v))
}

// AgeLTE applies the LTE predicate on the "age" field.
func AgeLTE(v int) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldAge, v))
}

// DischargedEQ applies the EQ predicate on the "discharged" field.
func DischargedEQ(v bool) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldDischarged, v))
}

// DischargedNEQ applies the NEQ predicate on the "discharged" field.
func DischargedNEQ(v bool) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldDischarged, v))
}

// CurrentVersionEQ applies the EQ predicate on the "current_version" field.
func CurrentVersionEQ(v int32) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldCurrentVersion, v))
}

// CurrentVersionNEQ applies the NEQ predicate on the "current_version" field.
func CurrentVersionNEQ(v int32) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldCurrentVersion, v))
}

// CurrentVersionIn applies the In predicate on the "current_version" field.
func CurrentVersionIn(vs ...int32) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldCurrentVersion, vs...))
}

// CurrentVersionNotIn applies the NotIn predicate on the "current_version" field.
func CurrentVersionNotIn(vs ...int32) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldCurrentVersion, vs...))
}

// CurrentVersionGT applies the GT predicate on the "current_version" field.
func CurrentVersionGT(v int32) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldCurrentVersion, v))
}

// CurrentVersionGTE applies the GTE predicate on the "current_version" field.
func CurrentVersionGTE(v int32) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldCurrentVersion, v))
}

// CurrentVersionLT applies the LT predicate on the "current_version" field.
func CurrentVersionLT(v int32) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldCurrentVersion, v))
}

// CurrentVersionLTE applies the LTE predicate on the "current_version" field.
func CurrentVersionLTE(v int32) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldCurrentVersion, v))
}

// CurrentVersionIsNil applies the IsNil predicate on the "current_version" field.
func CurrentVersionIsNil() predicate.Patient {
	return predicate.Patient(sql.FieldIsNull(FieldCurrentVersion))
}

// CurrentVersionNotNil applies the NotNil predicate on the "current_version" field.
func CurrentVersionNotNil() predicate.Patient {
	return predicate.Patient(sql.FieldNotNull(FieldCurrentVersion))
}

// ProjectedAtDatetimeEQ applies the EQ predicate on the "projected_at_datetime" field.
func ProjectedAtDatetimeEQ(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldProjectedAtDatetime, v))
}

// ProjectedAtDatetimeNEQ applies the NEQ predicate on the "projected_at_datetime" field.
func ProjectedAtDatetimeNEQ(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldProjectedAtDatetime, v))
}

// ProjectedAtDatetimeIn applies the In predicate on the "projected_at_datetime" field.
func ProjectedAtDatetimeIn(vs ...time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldProjectedAtDatetime, vs...))
}

// ProjectedAtDatetimeNotIn applies the NotIn predicate on the "projected_at_datetime" field.
func ProjectedAtDatetimeNotIn(vs ...time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldProjectedAtDatetime, vs...))
}

// ProjectedAtDatetimeGT applies the GT predicate on the "projected_at_datetime" field.
func ProjectedAtDatetimeGT(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldProjectedAtDatetime, v))
}

// ProjectedAtDatetimeGTE applies the GTE predicate on the "projected_at_datetime" field.
func ProjectedAtDatetimeGTE(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldProjectedAtDatetime, v))
}

// ProjectedAtDatetimeLT applies the LT predicate on the "projected_at_datetime" field.
func ProjectedAtDatetimeLT(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldProjectedAtDatetime, v))
}

// ProjectedAtDatetimeLTE applies the LTE predicate on the "projected_at_datetime" field.
func ProjectedAtDatetimeLTE(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldProjectedAtDatetime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Patient) predicate.Patient {
	return predicate.Patient(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Patient) predicate.Patient {
	return predicate.Patient(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Patient) predicate.Patient {
	return predicate.Patient(sql.NotPredicates(p))
}
