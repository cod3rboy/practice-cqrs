// Code generated by ent, DO NOT EDIT.

package patient

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the patient type in the database.
	Label = "patient"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldWard holds the string denoting the ward field in the database.
	FieldWard = "ward"
	// FieldAge holds the string denoting the age field in the database.
	FieldAge = "age"
	// FieldDischarged holds the string denoting the discharged field in the database.
	FieldDischarged = "discharged"
	// FieldCurrentVersion holds the string denoting the current_version field in the database.
	FieldCurrentVersion = "current_version"
	// FieldProjectedAtDatetime holds the string denoting the projected_at_datetime field in the database.
	FieldProjectedAtDatetime = "projected_at_datetime"
	// Table holds the table name of the patient in the database.
	Table = "patients"
)

// Columns holds all SQL columns for patient fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldWard,
	FieldAge,
	FieldDischarged,
	FieldCurrentVersion,
	FieldProjectedAtDatetime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Patient queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByWard orders the results by the ward field.
func ByWard(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWard, opts...).ToFunc()
}

// ByAge orders the results by the age field.
func ByAge(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAge, opts...).ToFunc()
}

// ByDischarged orders the results by the discharged field.
func ByDischarged(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDischarged, opts...).ToFunc()
}

// ByCurrentVersion orders the results by the current_version field.
func ByCurrentVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentVersion, opts...).ToFunc()
}

// ByProjectedAtDatetime orders the results by the projected_at_datetime field.
func ByProjectedAtDatetime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProjectedAtDatetime, opts...).ToFunc()
}
