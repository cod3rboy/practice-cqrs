// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/cod3rboy/practice-cqrs/ent/event"
	"github.com/cod3rboy/practice-cqrs/ent/patient"
	"github.com/cod3rboy/practice-cqrs/ent/predicate"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeEvent   = "Event"
	TypePatient = "Patient"
)

// EventMutation represents an operation that mutates the Event nodes in the graph.
type EventMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	_StreamId          *string
	_StreamPosition    *uint64
	add_StreamPosition *int64
	_EventType         *string
	_Data              *[]byte
	_CreatedDate       *time.Time
	clearedFields      map[string]struct{}
	done               bool
	oldValue           func(context.Context) (*Event, error)
	predicates         []predicate.Event
}

var _ ent.Mutation = (*EventMutation)(nil)

// eventOption allows management of the mutation configuration using functional options.
type eventOption func(*EventMutation)

// newEventMutation creates new mutation for the Event entity.
func newEventMutation(c config, op Op, opts ...eventOption) *EventMutation {
	m := &EventMutation{
		config:        c,
		op:            op,
		typ:           TypeEvent,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEventID sets the ID field of the mutation.
func withEventID(id int) eventOption {
	return func(m *EventMutation) {
		var (
			err   error
			once  sync.Once
			value *Event
		)
		m.oldValue = func(ctx context.Context) (*Event, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Event.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEvent sets the old Event of the mutation.
func withEvent(node *Event) eventOption {
	return func(m *EventMutation) {
		m.oldValue = func(context.Context) (*Event, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EventMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EventMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EventMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EventMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Event.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStreamId sets the "StreamId" field.
func (m *EventMutation) SetStreamId(s string) {
	m._StreamId = &s
}

// StreamId returns the value of the "StreamId" field in the mutation.
func (m *EventMutation) StreamId() (r string, exists bool) {
	v := m._StreamId
	if v == nil {
		return
	}
	return *v, true
}

// OldStreamId returns the old "StreamId" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldStreamId(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStreamId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStreamId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStreamId: %w", err)
	}
	return oldValue.StreamId, nil
}

// ResetStreamId resets all changes to the "StreamId" field.
func (m *EventMutation) ResetStreamId() {
	m._StreamId = nil
}

// SetStreamPosition sets the "StreamPosition" field.
func (m *EventMutation) SetStreamPosition(u uint64) {
	m._StreamPosition = &u
	m.add_StreamPosition = nil
}

// StreamPosition returns the value of the "StreamPosition" field in the mutation.
func (m *EventMutation) StreamPosition() (r uint64, exists bool) {
	v := m._StreamPosition
	if v == nil {
		return
	}
	return *v, true
}

// OldStreamPosition returns the old "StreamPosition" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldStreamPosition(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStreamPosition is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStreamPosition requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStreamPosition: %w", err)
	}
	return oldValue.StreamPosition, nil
}

// AddStreamPosition adds u to the "StreamPosition" field.
func (m *EventMutation) AddStreamPosition(u int64) {
	if m.add_StreamPosition != nil {
		*m.add_StreamPosition += u
	} else {
		m.add_StreamPosition = &u
	}
}

// AddedStreamPosition returns the value that was added to the "StreamPosition" field in this mutation.
func (m *EventMutation) AddedStreamPosition() (r int64, exists bool) {
	v := m.add_StreamPosition
	if v == nil {
		return
	}
	return *v, true
}

// ResetStreamPosition resets all changes to the "StreamPosition" field.
func (m *EventMutation) ResetStreamPosition() {
	m._StreamPosition = nil
	m.add_StreamPosition = nil
}

// SetEventType sets the "EventType" field.
func (m *EventMutation) SetEventType(s string) {
	m._EventType = &s
}

// EventType returns the value of the "EventType" field in the mutation.
func (m *EventMutation) EventType() (r string, exists bool) {
	v := m._EventType
	if v == nil {
		return
	}
	return *v, true
}

// OldEventType returns the old "EventType" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldEventType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEventType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEventType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEventType: %w", err)
	}
	return oldValue.EventType, nil
}

// ResetEventType resets all changes to the "EventType" field.
func (m *EventMutation) ResetEventType() {
	m._EventType = nil
}

// SetData sets the "Data" field.
func (m *EventMutation) SetData(b []byte) {
	m._Data = &b
}

// Data returns the value of the "Data" field in the mutation.
func (m *EventMutation) Data() (r []byte, exists bool) {
	v := m._Data
	if v == nil {
		return
	}
	return *v, true
}

// OldData returns the old "Data" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldData(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldData: %w", err)
	}
	return oldValue.Data, nil
}

// ResetData resets all changes to the "Data" field.
func (m *EventMutation) ResetData() {
	m._Data = nil
}

// SetCreatedDate sets the "CreatedDate" field.
func (m *EventMutation) SetCreatedDate(t time.Time) {
	m._CreatedDate = &t
}

// CreatedDate returns the value of the "CreatedDate" field in the mutation.
func (m *EventMutation) CreatedDate() (r time.Time, exists bool) {
	v := m._CreatedDate
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedDate returns the old "CreatedDate" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldCreatedDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedDate: %w", err)
	}
	return oldValue.CreatedDate, nil
}

// ClearCreatedDate clears the value of the "CreatedDate" field.
func (m *EventMutation) ClearCreatedDate() {
	m._CreatedDate = nil
	m.clearedFields[event.FieldCreatedDate] = struct{}{}
}

// CreatedDateCleared returns if the "CreatedDate" field was cleared in this mutation.
func (m *EventMutation) CreatedDateCleared() bool {
	_, ok := m.clearedFields[event.FieldCreatedDate]
	return ok
}

// ResetCreatedDate resets all changes to the "CreatedDate" field.
func (m *EventMutation) ResetCreatedDate() {
	m._CreatedDate = nil
	delete(m.clearedFields, event.FieldCreatedDate)
}

// Where appends a list predicates to the EventMutation builder.
func (m *EventMutation) Where(ps ...predicate.Event) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EventMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EventMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Event, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EventMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EventMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Event).
func (m *EventMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EventMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m._StreamId != nil {
		fields = append(fields, event.FieldStreamId)
	}
	if m._StreamPosition != nil {
		fields = append(fields, event.FieldStreamPosition)
	}
	if m._EventType != nil {
		fields = append(fields, event.FieldEventType)
	}
	if m._Data != nil {
		fields = append(fields, event.FieldData)
	}
	if m._CreatedDate != nil {
		fields = append(fields, event.FieldCreatedDate)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EventMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case event.FieldStreamId:
		return m.StreamId()
	case event.FieldStreamPosition:
		return m.StreamPosition()
	case event.FieldEventType:
		return m.EventType()
	case event.FieldData:
		return m.Data()
	case event.FieldCreatedDate:
		return m.CreatedDate()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EventMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case event.FieldStreamId:
		return m.OldStreamId(ctx)
	case event.FieldStreamPosition:
		return m.OldStreamPosition(ctx)
	case event.FieldEventType:
		return m.OldEventType(ctx)
	case event.FieldData:
		return m.OldData(ctx)
	case event.FieldCreatedDate:
		return m.OldCreatedDate(ctx)
	}
	return nil, fmt.Errorf("unknown Event field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EventMutation) SetField(name string, value ent.Value) error {
	switch name {
	case event.FieldStreamId:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStreamId(v)
		return nil
	case event.FieldStreamPosition:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStreamPosition(v)
		return nil
	case event.FieldEventType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEventType(v)
		return nil
	case event.FieldData:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetData(v)
		return nil
	case event.FieldCreatedDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedDate(v)
		return nil
	}
	return fmt.Errorf("unknown Event field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EventMutation) AddedFields() []string {
	var fields []string
	if m.add_StreamPosition != nil {
		fields = append(fields, event.FieldStreamPosition)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EventMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case event.FieldStreamPosition:
		return m.AddedStreamPosition()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EventMutation) AddField(name string, value ent.Value) error {
	switch name {
	case event.FieldStreamPosition:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStreamPosition(v)
		return nil
	}
	return fmt.Errorf("unknown Event numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EventMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(event.FieldCreatedDate) {
		fields = append(fields, event.FieldCreatedDate)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EventMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EventMutation) ClearField(name string) error {
	switch name {
	case event.FieldCreatedDate:
		m.ClearCreatedDate()
		return nil
	}
	return fmt.Errorf("unknown Event nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EventMutation) ResetField(name string) error {
	switch name {
	case event.FieldStreamId:
		m.ResetStreamId()
		return nil
	case event.FieldStreamPosition:
		m.ResetStreamPosition()
		return nil
	case event.FieldEventType:
		m.ResetEventType()
		return nil
	case event.FieldData:
		m.ResetData()
		return nil
	case event.FieldCreatedDate:
		m.ResetCreatedDate()
		return nil
	}
	return fmt.Errorf("unknown Event field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EventMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EventMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EventMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EventMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EventMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EventMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EventMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Event unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EventMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Event edge %s", name)
}

// PatientMutation represents an operation that mutates the Patient nodes in the graph.
type PatientMutation struct {
	config
	op                    Op
	typ                   string
	id                    *uuid.UUID
	name                  *string
	ward                  *int
	addward               *int
	age                   *int
	addage                *int
	discharged            *bool
	current_version       *int32
	addcurrent_version    *int32
	projected_at_datetime *time.Time
	clearedFields         map[string]struct{}
	done                  bool
	oldValue              func(context.Context) (*Patient, error)
	predicates            []predicate.Patient
}

var _ ent.Mutation = (*PatientMutation)(nil)

// patientOption allows management of the mutation configuration using functional options.
type patientOption func(*PatientMutation)

// newPatientMutation creates new mutation for the Patient entity.
func newPatientMutation(c config, op Op, opts ...patientOption) *PatientMutation {
	m := &PatientMutation{
		config:        c,
		op:            op,
		typ:           TypePatient,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPatientID sets the ID field of the mutation.
func withPatientID(id uuid.UUID) patientOption {
	return func(m *PatientMutation) {
		var (
			err   error
			once  sync.Once
			value *Patient
		)
		m.oldValue = func(ctx context.Context) (*Patient, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Patient.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPatient sets the old Patient of the mutation.
func withPatient(node *Patient) patientOption {
	return func(m *PatientMutation) {
		m.oldValue = func(context.Context) (*Patient, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PatientMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PatientMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Patient entities.
func (m *PatientMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PatientMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PatientMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Patient.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *PatientMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PatientMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Patient entity.
// If the Patient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PatientMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PatientMutation) ResetName() {
	m.name = nil
}

// SetWard sets the "ward" field.
func (m *PatientMutation) SetWard(i int) {
	m.ward = &i
	m.addward = nil
}

// Ward returns the value of the "ward" field in the mutation.
func (m *PatientMutation) Ward() (r int, exists bool) {
	v := m.ward
	if v == nil {
		return
	}
	return *v, true
}

// OldWard returns the old "ward" field's value of the Patient entity.
// If the Patient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PatientMutation) OldWard(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWard is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWard requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWard: %w", err)
	}
	return oldValue.Ward, nil
}

// AddWard adds i to the "ward" field.
func (m *PatientMutation) AddWard(i int) {
	if m.addward != nil {
		*m.addward += i
	} else {
		m.addward = &i
	}
}

// AddedWard returns the value that was added to the "ward" field in this mutation.
func (m *PatientMutation) AddedWard() (r int, exists bool) {
	v := m.addward
	if v == nil {
		return
	}
	return *v, true
}

// ResetWard resets all changes to the "ward" field.
func (m *PatientMutation) ResetWard() {
	m.ward = nil
	m.addward = nil
}

// SetAge sets the "age" field.
func (m *PatientMutation) SetAge(i int) {
	m.age = &i
	m.addage = nil
}

// Age returns the value of the "age" field in the mutation.
func (m *PatientMutation) Age() (r int, exists bool) {
	v := m.age
	if v == nil {
		return
	}
	return *v, true
}

// OldAge returns the old "age" field's value of the Patient entity.
// If the Patient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PatientMutation) OldAge(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAge is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAge: %w", err)
	}
	return oldValue.Age, nil
}

// AddAge adds i to the "age" field.
func (m *PatientMutation) AddAge(i int) {
	if m.addage != nil {
		*m.addage += i
	} else {
		m.addage = &i
	}
}

// AddedAge returns the value that was added to the "age" field in this mutation.
func (m *PatientMutation) AddedAge() (r int, exists bool) {
	v := m.addage
	if v == nil {
		return
	}
	return *v, true
}

// ResetAge resets all changes to the "age" field.
func (m *PatientMutation) ResetAge() {
	m.age = nil
	m.addage = nil
}

// SetDischarged sets the "discharged" field.
func (m *PatientMutation) SetDischarged(b bool) {
	m.discharged = &b
}

// Discharged returns the value of the "discharged" field in the mutation.
func (m *PatientMutation) Discharged() (r bool, exists bool) {
	v := m.discharged
	if v == nil {
		return
	}
	return *v, true
}

// OldDischarged returns the old "discharged" field's value of the Patient entity.
// If the Patient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PatientMutation) OldDischarged(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDischarged is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDischarged requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDischarged: %w", err)
	}
	return oldValue.Discharged, nil
}

// ResetDischarged resets all changes to the "discharged" field.
func (m *PatientMutation) ResetDischarged() {
	m.discharged = nil
}

// SetCurrentVersion sets the "current_version" field.
func (m *PatientMutation) SetCurrentVersion(i int32) {
	m.current_version = &i
	m.addcurrent_version = nil
}

// CurrentVersion returns the value of the "current_version" field in the mutation.
func (m *PatientMutation) CurrentVersion() (r int32, exists bool) {
	v := m.current_version
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrentVersion returns the old "current_version" field's value of the Patient entity.
// If the Patient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PatientMutation) OldCurrentVersion(ctx context.Context) (v *int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrentVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrentVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrentVersion: %w", err)
	}
	return oldValue.CurrentVersion, nil
}

// AddCurrentVersion adds i to the "current_version" field.
func (m *PatientMutation) AddCurrentVersion(i int32) {
	if m.addcurrent_version != nil {
		*m.addcurrent_version += i
	} else {
		m.addcurrent_version = &i
	}
}

// AddedCurrentVersion returns the value that was added to the "current_version" field in this mutation.
func (m *PatientMutation) AddedCurrentVersion() (r int32, exists bool) {
	v := m.addcurrent_version
	if v == nil {
		return
	}
	return *v, true
}

// ClearCurrentVersion clears the value of the "current_version" field.
func (m *PatientMutation) ClearCurrentVersion() {
	m.current_version = nil
	m.addcurrent_version = nil
	m.clearedFields[patient.FieldCurrentVersion] = struct{}{}
}

// CurrentVersionCleared returns if the "current_version" field was cleared in this mutation.
func (m *PatientMutation) CurrentVersionCleared() bool {
	_, ok := m.clearedFields[patient.FieldCurrentVersion]
	return ok
}

// ResetCurrentVersion resets all changes to the "current_version" field.
func (m *PatientMutation) ResetCurrentVersion() {
	m.current_version = nil
	m.addcurrent_version = nil
	delete(m.clearedFields, patient.FieldCurrentVersion)
}

// SetProjectedAtDatetime sets the "projected_at_datetime" field.
func (m *PatientMutation) SetProjectedAtDatetime(t time.Time) {
	m.projected_at_datetime = &t
}

// ProjectedAtDatetime returns the value of the "projected_at_datetime" field in the mutation.
func (m *PatientMutation) ProjectedAtDatetime() (r time.Time, exists bool) {
	v := m.projected_at_datetime
	if v == nil {
		return
	}
	return *v, true
}

// OldProjectedAtDatetime returns the old "projected_at_datetime" field's value of the Patient entity.
// If the Patient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PatientMutation) OldProjectedAtDatetime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProjectedAtDatetime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProjectedAtDatetime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProjectedAtDatetime: %w", err)
	}
	return oldValue.ProjectedAtDatetime, nil
}

// ResetProjectedAtDatetime resets all changes to the "projected_at_datetime" field.
func (m *PatientMutation) ResetProjectedAtDatetime() {
	m.projected_at_datetime = nil
}

// Where appends a list predicates to the PatientMutation builder.
func (m *PatientMutation) Where(ps ...predicate.Patient) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PatientMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PatientMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Patient, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PatientMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PatientMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Patient).
func (m *PatientMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PatientMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name != nil {
		fields = append(fields, patient.FieldName)
	}
	if m.ward != nil {
		fields = append(fields, patient.FieldWard)
	}
	if m.age != nil {
		fields = append(fields, patient.FieldAge)
	}
	if m.discharged != nil {
		fields = append(fields, patient.FieldDischarged)
	}
	if m.current_version != nil {
		fields = append(fields, patient.FieldCurrentVersion)
	}
	if m.projected_at_datetime != nil {
		fields = append(fields, patient.FieldProjectedAtDatetime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PatientMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case patient.FieldName:
		return m.Name()
	case patient.FieldWard:
		return m.Ward()
	case patient.FieldAge:
		return m.Age()
	case patient.FieldDischarged:
		return m.Discharged()
	case patient.FieldCurrentVersion:
		return m.CurrentVersion()
	case patient.FieldProjectedAtDatetime:
		return m.ProjectedAtDatetime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PatientMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case patient.FieldName:
		return m.OldName(ctx)
	case patient.FieldWard:
		return m.OldWard(ctx)
	case patient.FieldAge:
		return m.OldAge(ctx)
	case patient.FieldDischarged:
		return m.OldDischarged(ctx)
	case patient.FieldCurrentVersion:
		return m.OldCurrentVersion(ctx)
	case patient.FieldProjectedAtDatetime:
		return m.OldProjectedAtDatetime(ctx)
	}
	return nil, fmt.Errorf("unknown Patient field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PatientMutation) SetField(name string, value ent.Value) error {
	switch name {
	case patient.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case patient.FieldWard:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWard(v)
		return nil
	case patient.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAge(v)
		return nil
	case patient.FieldDischarged:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDischarged(v)
		return nil
	case patient.FieldCurrentVersion:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrentVersion(v)
		return nil
	case patient.FieldProjectedAtDatetime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProjectedAtDatetime(v)
		return nil
	}
	return fmt.Errorf("unknown Patient field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PatientMutation) AddedFields() []string {
	var fields []string
	if m.addward != nil {
		fields = append(fields, patient.FieldWard)
	}
	if m.addage != nil {
		fields = append(fields, patient.FieldAge)
	}
	if m.addcurrent_version != nil {
		fields = append(fields, patient.FieldCurrentVersion)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PatientMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case patient.FieldWard:
		return m.AddedWard()
	case patient.FieldAge:
		return m.AddedAge()
	case patient.FieldCurrentVersion:
		return m.AddedCurrentVersion()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PatientMutation) AddField(name string, value ent.Value) error {
	switch name {
	case patient.FieldWard:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWard(v)
		return nil
	case patient.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAge(v)
		return nil
	case patient.FieldCurrentVersion:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCurrentVersion(v)
		return nil
	}
	return fmt.Errorf("unknown Patient numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PatientMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(patient.FieldCurrentVersion) {
		fields = append(fields, patient.FieldCurrentVersion)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PatientMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PatientMutation) ClearField(name string) error {
	switch name {
	case patient.FieldCurrentVersion:
		m.ClearCurrentVersion()
		return nil
	}
	return fmt.Errorf("unknown Patient nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PatientMutation) ResetField(name string) error {
	switch name {
	case patient.FieldName:
		m.ResetName()
		return nil
	case patient.FieldWard:
		m.ResetWard()
		return nil
	case patient.FieldAge:
		m.ResetAge()
		return nil
	case patient.FieldDischarged:
		m.ResetDischarged()
		return nil
	case patient.FieldCurrentVersion:
		m.ResetCurrentVersion()
		return nil
	case patient.FieldProjectedAtDatetime:
		m.ResetProjectedAtDatetime()
		return nil
	}
	return fmt.Errorf("unknown Patient field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PatientMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PatientMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PatientMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PatientMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PatientMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PatientMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PatientMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Patient unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PatientMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Patient edge %s", name)
}
