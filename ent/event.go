// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/cod3rboy/practice-cqrs/ent/event"
)

// Event is the model entity for the Event schema.
type Event struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// StreamId holds the value of the "StreamId" field.
	StreamId string `json:"StreamId,omitempty"`
	// StreamPosition holds the value of the "StreamPosition" field.
	StreamPosition uint64 `json:"StreamPosition,omitempty"`
	// EventType holds the value of the "EventType" field.
	EventType string `json:"EventType,omitempty"`
	// Data holds the value of the "Data" field.
	Data []byte `json:"Data,omitempty"`
	// CreatedDate holds the value of the "CreatedDate" field.
	CreatedDate  time.Time `json:"CreatedDate,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Event) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case event.FieldData:
			values[i] = new([]byte)
		case event.FieldID, event.FieldStreamPosition:
			values[i] = new(sql.NullInt64)
		case event.FieldStreamId, event.FieldEventType:
			values[i] = new(sql.NullString)
		case event.FieldCreatedDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Event fields.
func (e *Event) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case event.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case event.FieldStreamId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field StreamId", values[i])
			} else if value.Valid {
				e.StreamId = value.String
			}
		case event.FieldStreamPosition:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field StreamPosition", values[i])
			} else if value.Valid {
				e.StreamPosition = uint64(value.Int64)
			}
		case event.FieldEventType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EventType", values[i])
			} else if value.Valid {
				e.EventType = value.String
			}
		case event.FieldData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field Data", values[i])
			} else if value != nil {
				e.Data = *value
			}
		case event.FieldCreatedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedDate", values[i])
			} else if value.Valid {
				e.CreatedDate = value.Time
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Event.
// This includes values selected through modifiers, order, etc.
func (e *Event) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// Update returns a builder for updating this Event.
// Note that you need to call Event.Unwrap() before calling this method if this Event
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Event) Update() *EventUpdateOne {
	return NewEventClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Event entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Event) Unwrap() *Event {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Event is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Event) String() string {
	var builder strings.Builder
	builder.WriteString("Event(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("StreamId=")
	builder.WriteString(e.StreamId)
	builder.WriteString(", ")
	builder.WriteString("StreamPosition=")
	builder.WriteString(fmt.Sprintf("%v", e.StreamPosition))
	builder.WriteString(", ")
	builder.WriteString("EventType=")
	builder.WriteString(e.EventType)
	builder.WriteString(", ")
	builder.WriteString("Data=")
	builder.WriteString(fmt.Sprintf("%v", e.Data))
	builder.WriteString(", ")
	builder.WriteString("CreatedDate=")
	builder.WriteString(e.CreatedDate.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Events is a parsable slice of Event.
type Events []*Event
